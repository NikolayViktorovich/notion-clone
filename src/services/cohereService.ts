export class CohereService {
  private static readonly PROXY_URL = process.env.NODE_ENV === 'development' 
    ? 'http://localhost:3001/generate'
    : '/api/cohere'; 

  static async generateText(prompt: string, context: string = ''): Promise<string> {
    try {
      console.log('üîÑ Sending request to:', this.PROXY_URL);
      
      const response = await fetch(this.PROXY_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          context
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Proxy error:', response.status, errorText);
        throw new Error(`Proxy error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.error) {
        console.error('Cohere API error:', data.error);
        throw new Error(data.error);
      }

      const generatedText = data.generations[0]?.text?.trim();
      
      if (!generatedText) {
        throw new Error('No text generated from Cohere API');
      }

      console.log('Successfully received response from Cohere API');
      return generatedText;
    } catch (error) {
      console.error('Cohere Service error:', error);
      return this.getDemoResponse(prompt);
    }
  }

  static async improveText(text: string): Promise<string> {
    const prompt = "–£–ª—É—á—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –≥—Ä–∞–º–æ—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:";
    const result = await this.generateText(prompt, text);

    if (result.includes('–¥–µ–º–æ-—Ä–µ–∂–∏–º–µ')) {
      return `–°–æ–≤–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞: "${text.substring(0, 50)}..." - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;
    }
    
    return result;
  }

  static async summarizeText(text: string): Promise<string> {
    const prompt = "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ, –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:";
    const result = await this.generateText(prompt, text);
    
    if (result.includes('–¥–µ–º–æ-—Ä–µ–∂–∏–º–µ')) {
      return `–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: "${text.substring(0, 70)}..." - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è —Ç–µ–∫—Å—Ç–∞.`;
    }
    
    return result;
  }

  static async expandText(text: string): Promise<string> {
    const prompt = "–†–∞—Å—à–∏—Ä—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤—å –¥–µ—Ç–∞–ª–∏, –ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:";
    const result = await this.generateText(prompt, text);
    
    if (result.includes('–¥–µ–º–æ-—Ä–µ–∂–∏–º–µ')) {
      return `–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: "${text}" - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã, –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.`;
    }
    
    return result;
  }

  static async correctGrammar(text: string): Promise<string> {
    const prompt = "–ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:";
    const result = await this.generateText(prompt, text);
    
    if (result.includes('–¥–µ–º–æ-—Ä–µ–∂–∏–º–µ')) {
      return `–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${text}" (–≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)`;
    }
    
    return result;
  }

  private static getDemoResponse(prompt: string): string {
    const demoResponses: { [key: string]: string } = {
    };

    const lowerPrompt = prompt.toLowerCase();
    
    for (const [key, response] of Object.entries(demoResponses)) {
      if (lowerPrompt.includes(key)) {
        return response;
      }
    }

    return `–ó–∞–ø—Ä–æ—Å: "${prompt}"\n\n–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. `;
  }
}